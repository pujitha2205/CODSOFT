<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Movie Recommendation System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .content {
            padding: 30px;
        }

        .user-selection {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
        }

        .user-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .user-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            border: 2px solid transparent;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .user-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
        }

        .user-card.active {
            border-color: #ff6b6b;
            background: #fff5f5;
        }

        .user-ratings {
            margin-top: 10px;
        }

        .rating-item {
            display: flex;
            justify-content: space-between;
            margin: 5px 0;
            font-size: 0.9em;
        }

        .rating-stars {
            color: #ffa502;
        }

        .recommendation-methods {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .method-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }

        .method-card:hover {
            border-color: #667eea;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .method-title {
            color: #2c3e50;
            font-size: 1.3em;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .method-icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .user-based .method-icon { background: #3742fa; }
        .item-based .method-icon { background: #2ed573; }
        .content-based .method-icon { background: #ff6348; }
        .hybrid .method-icon { background: #a55eea; }

        .recommendation-list {
            min-height: 200px;
        }

        .recommendation-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            margin: 8px 0;
            background: #f8f9fa;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .recommendation-item:hover {
            background: #e9ecef;
            transform: translateX(5px);
        }

        .movie-info {
            flex: 1;
        }

        .movie-title {
            font-weight: bold;
            color: #2c3e50;
        }

        .movie-genres {
            font-size: 0.9em;
            color: #7f8c8d;
            margin-top: 2px;
        }

        .score {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: bold;
        }

        .no-recommendations {
            text-align: center;
            color: #7f8c8d;
            font-style: italic;
            padding: 40px;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #667eea;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .loading {
            animation: pulse 1.5s infinite;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸŽ¬ Movie Recommendation System</h1>
            <p>Discover your next favorite movie using AI-powered recommendations</p>
        </div>
        
        <div class="content">
            <div class="user-selection">
                <h2>Select a User Profile</h2>
                <div class="user-grid" id="userGrid">
                </div>
            </div>

            <div class="recommendation-methods" id="recommendationMethods">
                <div class="method-card user-based">
                    <div class="method-title">
                        <div class="method-icon">U</div>
                        User-Based Collaborative
                    </div>
                    <div class="recommendation-list" id="userBased">
                        <div class="no-recommendations">Select a user to see recommendations</div>
                    </div>
                </div>

                <div class="method-card item-based">
                    <div class="method-title">
                        <div class="method-icon">I</div>
                        Item-Based Collaborative
                    </div>
                    <div class="recommendation-list" id="itemBased">
                        <div class="no-recommendations">Select a user to see recommendations</div>
                    </div>
                </div>

                <div class="method-card content-based">
                    <div class="method-title">
                        <div class="method-icon">C</div>
                        Content-Based Filtering
                    </div>
                    <div class="recommendation-list" id="contentBased">
                        <div class="no-recommendations">Select a user to see recommendations</div>
                    </div>
                </div>

                <div class="method-card hybrid">
                    <div class="method-title">
                        <div class="method-icon">H</div>
                        Hybrid Recommendation
                    </div>
                    <div class="recommendation-list" id="hybrid">
                        <div class="no-recommendations">Select a user to see recommendations</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        class RecommendationSystem {
            constructor() {
                this.users = {};
                this.movies = {};
                this.ratings = {};
                this.initializeData();
            }

            initializeData() {
                this.movies = {
                    1: { title: "The Matrix", genres: "Action, Sci-Fi", description: "A computer programmer discovers reality is a simulation" },
                    2: { title: "Titanic", genres: "Romance, Drama", description: "A love story aboard the doomed ship" },
                    3: { title: "The Godfather", genres: "Crime, Drama", description: "The saga of a powerful crime family" },
                    4: { title: "Star Wars", genres: "Action, Sci-Fi, Adventure", description: "A space opera about rebels fighting an empire" },
                    5: { title: "Pulp Fiction", genres: "Crime, Drama", description: "Interconnected stories of crime in Los Angeles" },
                    6: { title: "The Shawshank Redemption", genres: "Drama", description: "A man's journey through prison and friendship" },
                    7: { title: "Forrest Gump", genres: "Drama, Comedy", description: "The extraordinary life of a simple man" },
                    8: { title: "Inception", genres: "Action, Sci-Fi, Thriller", description: "A thief who enters dreams to steal secrets" },
                    9: { title: "The Dark Knight", genres: "Action, Crime, Drama", description: "Batman faces the Joker in Gotham City" },
                    10: { title: "Avatar", genres: "Action, Adventure, Sci-Fi", description: "Humans colonize an alien planet" },
                    11: { title: "Casablanca", genres: "Romance, Drama", description: "A classic wartime romance" },
                    12: { title: "Goodfellas", genres: "Crime, Drama", description: "The rise and fall of a mob associate" }
                };

                this.users = {
                    'Alice': { preference: 'Action & Sci-Fi Lover' },
                    'Bob': { preference: 'Romance & Drama Fan' },
                    'Charlie': { preference: 'Crime & Thriller Enthusiast' },
                    'Diana': { preference: 'Sci-Fi Adventure Seeker' },
                    'Eve': { preference: 'Classic Drama Appreciator' }
                };

                this.ratings = {
                    'Alice': { 1: 5.0, 2: 2.0, 3: 4.0, 4: 5.0, 8: 4.5, 10: 4.0 },
                    'Bob': { 1: 3.0, 2: 5.0, 6: 4.5, 7: 4.0, 9: 3.0, 11: 5.0 },
                    'Charlie': { 3: 5.0, 5: 4.5, 6: 5.0, 9: 4.0, 1: 3.5, 12: 4.5 },
                    'Diana': { 4: 5.0, 8: 4.5, 9: 4.0, 10: 4.5, 1: 4.0, 2: 2.5 },
                    'Eve': { 2: 4.5, 6: 5.0, 7: 4.5, 3: 4.0, 5: 3.5, 11: 4.5 }
                };
            }

            cosineSimilarity(vecA, vecB) {
                const dotProduct = vecA.reduce((sum, a, i) => sum + a * vecB[i], 0);
                const magnitudeA = Math.sqrt(vecA.reduce((sum, a) => sum + a * a, 0));
                const magnitudeB = Math.sqrt(vecB.reduce((sum, b) => sum + b * b, 0));
                return magnitudeA && magnitudeB ? dotProduct / (magnitudeA * magnitudeB) : 0;
            }

            getUserVector(userId) {
                const movieIds = Object.keys(this.movies).map(Number).sort((a, b) => a - b);
                return movieIds.map(movieId => this.ratings[userId][movieId] || 0);
            }

            getItemVector(movieId) {
                const userIds = Object.keys(this.users);
                return userIds.map(userId => this.ratings[userId][movieId] || 0);
            }

            userBasedCollaborativeFiltering(targetUser, n = 5) {
                const targetVector = this.getUserVector(targetUser);
                const similarities = {};

                Object.keys(this.users).forEach(userId => {
                    if (userId !== targetUser) {
                        const userVector = this.getUserVector(userId);
                        similarities[userId] = this.cosineSimilarity(targetVector, userVector);
                    }
                });

                const sortedUsers = Object.entries(similarities)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, 3);

                const recommendations = {};
                const targetRatings = this.ratings[targetUser];

                sortedUsers.forEach(([userId, similarity]) => {
                    Object.entries(this.ratings[userId]).forEach(([movieId, rating]) => {
                        movieId = Number(movieId);
                        if (!targetRatings[movieId]) {
                            recommendations[movieId] = (recommendations[movieId] || 0) + rating * similarity;
                        }
                    });
                });

                return Object.entries(recommendations)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, n)
                    .map(([movieId, score]) => ({
                        movieId: Number(movieId),
                        title: this.movies[movieId].title,
                        genres: this.movies[movieId].genres,
                        score: score
                    }));
            }

            itemBasedCollaborativeFiltering(targetUser, n = 5) {
                const targetRatings = this.ratings[targetUser];
                const recommendations = {};

                Object.entries(targetRatings).forEach(([ratedMovieId, rating]) => {
                    ratedMovieId = Number(ratedMovieId);
                    const ratedVector = this.getItemVector(ratedMovieId);

                    Object.keys(this.movies).forEach(candidateMovieId => {
                        candidateMovieId = Number(candidateMovieId);
                        if (!targetRatings[candidateMovieId]) {
                            const candidateVector = this.getItemVector(candidateMovieId);
                            const similarity = this.cosineSimilarity(ratedVector, candidateVector);
                            
                            if (similarity > 0) {
                                recommendations[candidateMovieId] = (recommendations[candidateMovieId] || 0) + rating * similarity;
                            }
                        }
                    });
                });

                return Object.entries(recommendations)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, n)
                    .map(([movieId, score]) => ({
                        movieId: Number(movieId),
                        title: this.movies[movieId].title,
                        genres: this.movies[movieId].genres,
                        score: score
                    }));
            }

            contentBasedFiltering(targetUser, n = 5) {
                const targetRatings = this.ratings[targetUser];
                const likedMovies = Object.entries(targetRatings)
                    .filter(([movieId, rating]) => rating >= 4.0)
                    .map(([movieId]) => Number(movieId));

                if (likedMovies.length === 0) return [];

                const genreProfile = {};
                likedMovies.forEach(movieId => {
                    const genres = this.movies[movieId].genres.split(', ');
                    genres.forEach(genre => {
                        genreProfile[genre] = (genreProfile[genre] || 0) + 1;
                    });
                });

                const recommendations = {};

                Object.keys(this.movies).forEach(candidateMovieId => {
                    candidateMovieId = Number(candidateMovieId);
                    if (!targetRatings[candidateMovieId]) {
                        const candidateGenres = this.movies[candidateMovieId].genres.split(', ');
                        let score = 0;
                        
                        candidateGenres.forEach(genre => {
                            score += genreProfile[genre] || 0;
                        });

                        if (score > 0) {
                            recommendations[candidateMovieId] = score;
                        }
                    }
                });

                return Object.entries(recommendations)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, n)
                    .map(([movieId, score]) => ({
                        movieId: Number(movieId),
                        title: this.movies[movieId].title,
                        genres: this.movies[movieId].genres,
                        score: score
                    }));
            }

            hybridRecommendation(targetUser, n = 5) {
                const userBased = this.userBasedCollaborativeFiltering(targetUser, n);
                const itemBased = this.itemBasedCollaborativeFiltering(targetUser, n);
                const contentBased = this.contentBasedFiltering(targetUser, n);

                const combinedScores = {};

                userBased.forEach(rec => {
                    combinedScores[rec.movieId] = (combinedScores[rec.movieId] || 0) + rec.score * 0.4;
                });

                itemBased.forEach(rec => {
                    combinedScores[rec.movieId] = (combinedScores[rec.movieId] || 0) + rec.score * 0.4;
                });

                contentBased.forEach(rec => {
                    combinedScores[rec.movieId] = (combinedScores[rec.movieId] || 0) + rec.score * 0.2;
                });

                return Object.entries(combinedScores)
                    .sort(([,a], [,b]) => b - a)
                    .slice(0, n)
                    .map(([movieId, score]) => ({
                        movieId: Number(movieId),
                        title: this.movies[movieId].title,
                        genres: this.movies[movieId].genres,
                        score: score
                    }));
            }
        }

        const recSystem = new RecommendationSystem();

        function initializeUI() {
            const userGrid = document.getElementById('userGrid');
            
            Object.entries(recSystem.users).forEach(([userId, userData]) => {
                const userCard = document.createElement('div');
                userCard.className = 'user-card';
                userCard.onclick = () => selectUser(userId);
                
                const ratings = recSystem.ratings[userId];
                const ratingsList = Object.entries(ratings)
                    .map(([movieId, rating]) => {
                        const stars = 'â˜…'.repeat(Math.floor(rating)) + (rating % 1 ? 'â˜†' : '');
                        return `<div class="rating-item">
                            <span>${recSystem.movies[movieId].title}</span>
                            <span class="rating-stars">${stars}</span>
                        </div>`;
                    }).join('');

                userCard.innerHTML = `
                    <h3>${userId}</h3>
                    <p style="color: #7f8c8d; font-size: 0.9em;">${userData.preference}</p>
                    <div class="user-ratings">
                        ${ratingsList}
                    </div>
                `;
                
                userGrid.appendChild(userCard);
            });
        }

        function selectUser(userId) {
            document.querySelectorAll('.user-card').forEach(card => card.classList.remove('active'));
            event.target.closest('.user-card').classList.add('active');
            
            showLoading();
            
            setTimeout(() => {
                updateRecommendations(userId);
            }, 500);
        }

        function showLoading() {
            const containers = ['userBased', 'itemBased', 'contentBased', 'hybrid'];
            containers.forEach(containerId => {
                document.getElementById(containerId).innerHTML = '<div class="loading">Generating recommendations...</div>';
            });
        }

        function updateRecommendations(userId) {
            const userBased = recSystem.userBasedCollaborativeFiltering(userId);
            const itemBased = recSystem.itemBasedCollaborativeFiltering(userId);
            const contentBased = recSystem.contentBasedFiltering(userId);
            const hybrid = recSystem.hybridRecommendation(userId);

            displayRecommendations('userBased', userBased);
            displayRecommendations('itemBased', itemBased);
            displayRecommendations('contentBased', contentBased);
            displayRecommendations('hybrid', hybrid);
        }

        function displayRecommendations(containerId, recommendations) {
            const container = document.getElementById(containerId);
            
            if (recommendations.length === 0) {
                container.innerHTML = '<div class="no-recommendations">No recommendations available</div>';
                return;
            }

            const html = recommendations.map(rec => `
                <div class="recommendation-item">
                    <div class="movie-info">
                        <div class="movie-title">${rec.title}</div>
                        <div class="movie-genres">${rec.genres}</div>
                    </div>
                    <div class="score">${rec.score.toFixed(2)}</div>
                </div>
            `).join('');

            container.innerHTML = html;
        }

        initializeUI();
    </script>
</body>
</html>
